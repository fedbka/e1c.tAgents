&НаКлиенте
Перем Telegram;

&НаКлиенте
Перем ОбработчикиОбратногоВызова;

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЭтаФорма.ПрекратитьОбработкуЗапросов = Ложь;
	ЭтаФорма.ВыполняетсяОбработкаЗапросов = Ложь;
	ЭтаФорма.КоличествоОбрабатываемыхЗапросов = 10;
	
	ОбработчикиОбратногоВызова = Новый Соответствие;
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаИнициализация;
	
	ИмяПараметраКомпоненты = ТелеграмАгентыКлиентСервер.ИмяПараметраКомпоненты();	
	
	Если Не ТелеграмАгентыСлужебныйКлиент.ПроинициализироватьКомпоненту(, ИмяПараметраКомпоненты) Тогда
		ТекстПредупреждения = НСтр("ru = 'Не удалось инициализировать компоненту TelegramNative. Работа консоли невозможна.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Telegram = ПараметрыПриложения[ИмяПараметраКомпоненты];
	
	ВыполнитьЗапросСостоянияАвторизации();
	
	Если НЕ ЭтаФорма.ПрекратитьОбработкуЗапросов Тогда
		
		ПодключитьОбработчикОжидания("ОбработатьЗапросыКТелеграмАгентам", 10);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)

	Если Источник = "TelegramNative" Тогда
		ОбработатьСобытиеTelegramNative(Источник, Событие, Данные);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОтправитьЗапросКодаПодтверждения(Команда)
	
	Если Не ЗначениеЗаполнено(ЭтаФорма.НомерТелефона) Тогда
		ТекстПредупреждения = НСтр("ru = 'Не указан номер телефона. Отправка запроса кода авторизации не выполнена.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ВыполнитьЗапросКодаПодтверждения();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПолученныйКодАвторизации(Команда)

	Если Не ЗначениеЗаполнено(ЭтаФорма.КодПодтверждения) Тогда
		ТекстПредупреждения = НСтр("ru = 'Не указан код авторизации. Отправка кода авторизации не выполнена.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ВыполнитьОтправкуКодаПодтверждения();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрекратитьОбработкуЗапросов(Команда)
	
	ЭтаФорма.ПрекратитьОбработкуЗапросов = НЕ ЭтаФорма.ПрекратитьОбработкуЗапросов;
	
	Элементы.ФормаПрекратитьОбработкуЗапросов.Пометка = ЭтаФорма.ПрекратитьОбработкуЗапросов;
	
	Если ЭтаФорма.ПрекратитьОбработкуЗапросов Тогда 
		ОтключитьОбработчикОжидания("ОбработатьЗапросыКТелеграмАгентам");
	Иначе
		ПодключитьОбработчикОжидания("ОбработатьЗапросыКТелеграмАгентам", 10);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаСобытийКомпоненты

&НаКлиенте
Процедура ОбработатьСобытиеTelegramNative(Источник, Событие, Данные)
	
	Если Не Событие = "Response" Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ СтрНайти(Данные, "@extra")
		И НЕ СтрНайти(Данные, "updateAuthorizationState") Тогда
		Возврат;
	КонецЕсли;
	
	Ответ = ТелеграмАгентыКлиентСервер.ОбработатьJSONОтвет(Данные);
	
	ТипОтвета = Ответ.Получить("@type");
	
	Если ТипОтвета = "updateAuthorizationState"
		ИЛИ ТипОтвета = "authorizationStateReady"
		ИЛИ ТипОтвета = "authorizationStateWaitPhoneNumber"
		ИЛИ ТипОтвета = "authorizationStateWaitCode"	
		Тогда
		ОбработкаАвторизации(Ответ, Данные);
		Возврат;
	КонецЕсли;
	
	ИдентификаторЗапроса = Ответ.Получить("@extra");
	
	Если ИдентификаторЗапроса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработчикиЗапроса = ОбработчикиОбратногоВызова.Получить(ИдентификаторЗапроса);
	
	Если ОбработчикиЗапроса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СведенияДляОбработки = Новый Структура;
	СведенияДляОбработки.Вставить("ИдентификаторЗапроса", ИдентификаторЗапроса);
	СведенияДляОбработки.Вставить("ОбработчикиЗапроса", ОбработчикиЗапроса);
	СведенияДляОбработки.Вставить("Ответ", Ответ);
	СведенияДляОбработки.Вставить("ОтветJSON", Данные);
	
	ВыполнитьОбработчикиЗапроса(СведенияДляОбработки);
	
	ОбработчикиОбратногоВызова.Удалить(ИдентификаторЗапроса);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаАвторизации(Ответ, ОтветJSON)
	
	Если Ответ["@type"] = "authorizationStateReady" Тогда
		
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаИсполнитель;
		
		Запрос = ТелеграмАгентыКлиентСервер.ЗапросЧаты();
		
		ТелеграмАгентыКлиент.ОтправитьЗапрос(Telegram, Запрос, ОбработчикиОбратногоВызова);
		
	Иначе
		
		ТелеграмАгентыКлиент.ОбработкаАвторизации(Telegram, Ответ, ОтветJSON, ОбработчикиОбратногоВызова);
			
		Если Ответ["authorization_state"]["@type"] = "authorizationStateWaitPhoneNumber" Тогда
			
			Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаАвторизация;
			
		ИначеЕсли Ответ["authorization_state"]["@type"] = "authorizationStateWaitCode" Тогда
			
			Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВводКодаПодтверждения;
			              
		ИначеЕсли Ответ["authorization_state"]["@type"] = "authorizationStateReady" Тогда
			
			Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаИсполнитель;
			
			Запрос = ТелеграмАгентыКлиентСервер.ЗапросЧаты();
			
			ТелеграмАгентыКлиент.ОтправитьЗапрос(Telegram, Запрос, ОбработчикиОбратногоВызова);
			
		КонецЕсли;
		
	КонецЕсли;
	
	
	ИдентификаторЗапроса = Ответ.Получить("@extra");
	
	Если ИдентификаторЗапроса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработчикиЗапроса = ОбработчикиОбратногоВызова.Получить(ИдентификаторЗапроса);
	
	Если ОбработчикиЗапроса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СведенияДляОбработки = Новый Структура;
	СведенияДляОбработки.Вставить("ИдентификаторЗапроса", ИдентификаторЗапроса);
	СведенияДляОбработки.Вставить("ОбработчикиЗапроса", ОбработчикиЗапроса);
	СведенияДляОбработки.Вставить("Ответ", Ответ);
	СведенияДляОбработки.Вставить("ОтветJSON", ОтветJSON);
	
	ВыполнитьОбработчикиЗапроса(СведенияДляОбработки);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработчикиЗапроса(СведенияДляОбработки)
	
	Аргументы = Новый Структура("ИдентификаторЗапроса, ОбработчикиЗапроса, Ответ, ОтветJSON");
	
	АргументыОбработчика = Новый Структура("ИдентификаторЗапроса, Ответ, ОтветJSON");
	
	ЗаполнитьЗначенияСвойств(Аргументы, СведенияДляОбработки);
	ЗаполнитьЗначенияСвойств(АргументыОбработчика, СведенияДляОбработки);
	
	Если ТипЗнч(Аргументы.ОбработчикиЗапроса) = Тип("Массив") Тогда
		
		Для Каждого Обработчик Из Аргументы.ОбработчикиЗапроса Цикл
			
			ВыполнитьОбработкуОповещения(Обработчик, АргументыОбработчика);
			
		КонецЦикла;
		
	КонецЕсли;
	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОбратногоВызова

&НаКлиенте
Процедура ИмпортКонтактаЗавершение(Аргументы, ТелефонПолучателя) Экспорт
		
	Идентификатор = Аргументы.Ответ["user_ids"][0];
	
	Если Идентификатор = 0 Тогда		

		Сообщение = Новый СообщениеПользователю();
		Сообщение.УстановитьДанные(ЭтаФорма);
		Сообщение.Текст = СтрШаблон("%1 еще не зарегистрирован в telegram", ТелефонПолучателя);
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	Запрос = ТелеграмАгентыКлиентСервер.ЗапросСозданиеЧастногоЧата(Идентификатор);

	Обработчики = Новый Массив;
	Обработчики.Добавить(Новый ОписаниеОповещения("СоздатьСекретныйЧатЗавершение", ЭтаФорма));	
	
	ТелеграмАгентыКлиент.ОтправитьЗапрос(Telegram, Запрос, ОбработчикиОбратногоВызова, Обработчики);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСекретныйЧатЗавершение(Аргументы, ДополнительныеПараметры) Экспорт
				
	Сообщение = ТелеграмАгентыКлиентСервер.ТекстСообщения(ЭтаФорма.ТекстСообщения);
	
	Запрос = ТелеграмАгентыКлиентСервер.ЗапросОтправкаСообщения(Сообщение, Аргументы.Ответ["id"]); 
		
	ТелеграмАгентыКлиент.ОтправитьЗапрос(Telegram, Запрос, ОбработчикиОбратногоВызова);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортКонтактовЗавершение(Аргументы, Получатели) Экспорт
	
	ИдентификаторыКонтактов = Аргументы.Ответ["user_ids"];
	
	ЕстьНезарегистрированныеКонтакты = Ложь;
	
	Счетчик = -1;
	Для Каждого ИдентификаторКонтакта Из ИдентификаторыКонтактов Цикл
		Счетчик = Счетчик + 1;
		Если ИдентификаторКонтакта <> 0 Тогда		
			Продолжить;
		КонецЕсли;
		
		Сообщение = Новый СообщениеПользователю();
		Сообщение.УстановитьДанные(ЭтаФорма);
		Сообщение.Текст = СтрШаблон("%1 еще не зарегистрирован в telegram", Получатели[Счетчик]);
		Сообщение.Сообщить();
		
		ЕстьНезарегистрированныеКонтакты = Истина;	
		
	КонецЦикла;
	
	Если ЕстьНезарегистрированныеКонтакты Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.УстановитьДанные(ЭтаФорма);
		Сообщение.Текст = "Не все контакты зарегистрированы в телеграм. Сообщение не отправлено";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭтаФорма.ИдентификаторЧата) Тогда
		
		Запрос = ТелеграмАгентыКлиентСервер.ЗапросДобавлениеПользователяВЧат(Аргументы.Ответ["id"], ЭтаФорма.ИдентификаторПользователя);
		
		Обработчики = Новый Массив;
		Обработчики.Добавить(Новый ОписаниеОповещения("ОтветНаПриглашениеБота", ЭтаФорма));
		
		ТелеграмАгентыКлиент.ОтправитьЗапрос(Telegram, Запрос, ОбработчикиОбратногоВызова, Обработчики);
		
		Запрос = ТелеграмАгентыКлиентСервер.ЗапросПригласитьБотаВГрупповойЧат(Аргументы.Ответ["id"], ЭтаФорма.ИдентификаторПользователя);
		
		Обработчики = Новый Массив;
		Обработчики.Добавить(Новый ОписаниеОповещения("ОтветНаПриглашениеБота", ЭтаФорма));
		ТелеграмАгентыКлиент.ОтправитьЗапрос(Telegram, Запрос, ОбработчикиОбратногоВызова, Обработчики);
		
	Иначе
		
		Запрос = ТелеграмАгентыКлиентСервер.ЗапросСозданиеГрупповогоЧата(ИдентификаторыКонтактов, "Час с автоматическим добавлением бота");

		Обработчики = Новый Массив;
		Обработчики.Добавить(Новый ОписаниеОповещения("ЗапросСозданиеГрупповогоЧата", ЭтаФорма));
		ТелеграмАгентыКлиент.ОтправитьЗапрос(Telegram, Запрос, ОбработчикиОбратногоВызова, Обработчики);
				
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗапросСозданиеГрупповогоЧата(Аргументы, ДополнительныеПараметры) Экспорт
	
	
	ЭтаФорма.ИдентификаторЧата = Формат(Аргументы.Ответ["id"], "ЧГ=0");
			
	Запрос = ТелеграмАгентыКлиентСервер.ЗапросДобавлениеПользователяВЧат(Аргументы.Ответ["id"], ЭтаФорма.ИдентификаторПользователя);
	
	Обработчики = Новый Массив;
	Обработчики.Добавить(Новый ОписаниеОповещения("ОтветНаПриглашениеБота", ЭтаФорма));
	
	ТелеграмАгентыКлиент.ОтправитьЗапрос(Telegram, Запрос, ОбработчикиОбратногоВызова, Обработчики);
	
	Запрос = ТелеграмАгентыКлиентСервер.ЗапросПригласитьБотаВГрупповойЧат(Аргументы.Ответ["id"], ЭтаФорма.ИдентификаторПользователя);
	
	Обработчики = Новый Массив;
	Обработчики.Добавить(Новый ОписаниеОповещения("ОтветНаПриглашениеБота", ЭтаФорма));
	
	ТелеграмАгентыКлиент.ОтправитьЗапрос(Telegram, Запрос, ОбработчикиОбратногоВызова, Обработчики);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветНаПриглашениеБота(Аргументы, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры 

&НаКлиенте
Процедура ЗапроситьКонтактыЗавершение(Аргументы, ДополнительныеПараметры) Экспорт
	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбработатьЗапросыКТелеграмАгентам() Экспорт

	Если ЭтаФорма.ВыполняетсяОбработкаЗапросов
		ИЛИ ЭтаФорма.ПрекратитьОбработкуЗапросов Тогда
		Возврат;
	КонецЕсли;
	
	ЭтаФорма.ВыполняетсяОбработкаЗапросов = Истина;
	
	ДанныеЗапросов = ДанныеЗапросовТелеграмАгентов(ЭтаФорма.КоличествоОбрабатываемыхЗапросов, ЭтаФорма.УникальныйИдентификатор);
	
	Для Каждого ДанныеЗапроса Из ДанныеЗапросов Цикл
		
		ВыполнитьОбработкуЗапроса(ДанныеЗапроса);
		
	КонецЦикла;
	
	ЭтаФорма.ВыполняетсяОбработкаЗапросов = Ложь;
	
	Элементы.ЗапросыКОбработке.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработкуЗапроса(ДанныеЗапроса)
	
	Если НЕ ТелеграмАгентыКлиентСервер.ДанныеВходящегоЗапросаКорректны(ДанныеЗапроса) Тогда
		ТелеграмАгентыВызовСервера.УстановитьПризнакОшибкиВЗапросе(ДанныеЗапроса);
		Возврат;
	КонецЕсли;

	ТелеграмАгентыКлиент.ПредОбработкаОтправляемыхДанных(ДанныеЗапроса, ЭтаФорма.УникальныйИдентификатор);
	
	Запрос =  ДанныеЗапроса.ТелоЗапросаСоответствие;
	
	Если Запрос = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	
	Обработчики = Новый Массив;
	Обработчики.Добавить(Новый ОписаниеОповещения("ОбработатьДанныеОтветаПоЗапросу", ЭтаФорма, ДанныеЗапроса));
	РезультатЗапроса = ТелеграмАгентыКлиент.ОтправитьЗапрос(Telegram, Запрос, ОбработчикиОбратногоВызова, Обработчики, ДанныеЗапроса.Идентификатор);
	
	Если РезультатЗапроса <> Неопределено Тогда
		ТелеграмАгентыВызовСервера.УстановитьСтатусОтправленВнешнемуЗапросу(ДанныеЗапроса.Идентификатор);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ОбработатьДанныеОтветаПоЗапросу(Аргументы, ДанныеЗапроса) Экспорт

	СведенияДляОбработки = Новый Структура;
	СведенияДляОбработки.Вставить("ИдентификаторЗапроса", "");
	СведенияДляОбработки.Вставить("Ответ", "");
	СведенияДляОбработки.Вставить("ОтветJSON", "");
		
	ЗаполнитьЗначенияСвойств(СведенияДляОбработки, Аргументы);
	
	ТелеграмАгентыВызовСервера.СохранитьОтветTelegramNative(СведенияДляОбработки.ОтветJSON, СведенияДляОбработки.ИдентификаторЗапроса, ТекущаяДата());
	
	ТелеграмАгентыКлиент.ПостОбработкаОтправляемыхДанных(ДанныеЗапроса, ЭтаФорма.УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеЗапросовТелеграмАгентов(КоличествоЗапросов, УникальныйИдентификаторФормы)
	
	Возврат ТелеграмАгенты.ДанныеЗапросовТелеграмАгентов(КоличествоЗапросов, УникальныйИдентификаторФормы);
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьЗапросСостоянияАвторизации()
	
	Запрос = ТелеграмАгентыКлиентСервер.ЗапросСостоянияАвторизации();
	
	ТелеграмАгентыКлиент.ОтправитьЗапрос(Telegram, Запрос, ОбработчикиОбратногоВызова);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗапросКодаПодтверждения()
	
	Запрос = ТелеграмАгентыКлиентСервер.ЗапросКодаПотверждения(ЭтаФорма.НомерТелефона);
		
	ТелеграмАгентыКлиент.ОтправитьЗапрос(Telegram, Запрос, ОбработчикиОбратногоВызова);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОтправкуКодаПодтверждения()
	
	Запрос = ТелеграмАгентыКлиентСервер.ЗапросУстановитьКодПодтверждения(ЭтаФорма.КодПодтверждения);
		
	ТелеграмАгентыКлиент.ОтправитьЗапрос(Telegram, Запрос, ОбработчикиОбратногоВызова);
	
КонецПроцедуры


#КонецОбласти
