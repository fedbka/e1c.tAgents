///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО Профинтех
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограмнныйИнтерфейс

Функция ОбработкаАвторизации(Telegram, Ответ, ИсходныеДанныеОтвета, ОбработчикиОбратногоВызова, Обработчики = Неопределено) Экспорт
	
	ЗапросJSON = "";
	
	Если Ответ["authorization_state"]["@type"] = "authorizationStateWaitTdlibParameters" Тогда
		
		Запрос = ТелеграмАгентыКлиентСервер.ЗапросУстановкаПараметровTDLib();
		
		ЗапросJSON = ОтправитьЗапрос(Telegram, Запрос, ОбработчикиОбратногоВызова, Обработчики);
		
	ИначеЕсли Ответ["authorization_state"]["@type"] = "authorizationStateWaitEncryptionKey" Тогда	
		
		Запрос = ТелеграмАгентыКлиентСервер.ЗапросПроверкаКлючаШифрования();
		
		ЗапросJSON = ОтправитьЗапрос(Telegram, Запрос, ОбработчикиОбратногоВызова, Обработчики);
		
	КонецЕсли;
	
	Возврат ЗапросJSON;
	
КонецФункции

Функция ОтправитьЗапрос(Telegram, Запрос, ОбработчикиОбратногоВызова, Обработчики = Неопределено, ЗНАЧ ИдентификаторЗапроса = Неопределено, Агент = Неопределено) Экспорт

	Если Telegram = Неопределено Тогда
		Telegram = ПараметрыПриложения[ТелеграмАгентыКлиентСервер.ИмяПараметраКомпоненты()];
		
		Если Telegram = Неопределено Тогда
			ВызватьИсключение(НСтр("ru = 'Компонента Telegram.Native не установлена или не инициализирована. Телеграм-запрос не отправлен.'"));
		КонецЕсли;
	КонецЕсли;
	
	Если ИдентификаторЗапроса = Неопределено Тогда
		ИдентификаторЗапроса = Строка(Новый УникальныйИдентификатор);
	КонецЕсли;

	Запрос.Вставить("@extra", ИдентификаторЗапроса);
	
	Если Обработчики <> Неопределено Тогда
		ОбработчикиОбратногоВызова.Вставить(ИдентификаторЗапроса, Обработчики);
	КонецЕсли;
	
	ЗапросJSON = ТелеграмАгентыКлиентСервер.ЗапросJSON(Запрос);
	
	Если ЗапросJSON = Неопределено Тогда
		Если Обработчики <> Неопределено Тогда
			ОбработчикиОбратногоВызова.Удалить(ИдентификаторЗапроса);
		КонецЕсли;
		ВызватьИсключение(НСтр("ru = 'Не удалось сформировать текст запроса к компоненте в формате JSON.'"));
	КонецЕсли;
	
	Telegram.Отправить(ЗапросJSON);
	
	ТелеграмАгентыВызовСервера.СохранитьЗапросTelegramNative(ЗапросJSON, ИдентификаторЗапроса, ТекущаяДата());
	
	Возврат ЗапросJSON;
	
КонецФункции

Процедура ПредОбработкаОтправляемыхДанных(ДанныеЗапроса, УникальныйИдентификаторФормы) Экспорт
	
	Если ДанныеЗапроса.Команда = "sendMessage" Тогда
		ПредОбработкаОтправляемыхДанных_sendMessage(ДанныеЗапроса, УникальныйИдентификаторФормы);
	КонецЕсли;
	
КонецПроцедуры 

Процедура ПредОбработкаОтправляемыхДанных_sendMessage(ДанныеЗапроса, УникальныйИдентификаторФормы)
	
	Если ДанныеЗапроса.ТелоЗапросаСоответствие.Получить("input_message_content").Получить("@type") <> "inputMessageDocument" Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСоответствие = ДанныеЗапроса.ТелоЗапросаСоответствие;
	
	АдресДвоичныхДанныхВоВременномХранилище = ЗапросСоответствие.Получить("input_message_content").Получить("documentTempStorage");
	ИмяФайла = ЗапросСоответствие.Получить("input_message_content").Получить("document").Получить("path");
	Если АдресДвоичныхДанныхВоВременномХранилище = Неопределено
		ИЛИ ИмяФайла = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(АдресДвоичныхДанныхВоВременномХранилище);
	Если ТипЗнч(ДвоичныеДанныеФайла) <> Тип("ДвоичныеДанные") Тогда
		Возврат;
	КонецЕсли;
	
	КаталогВременныхФайлов = ПолучитьИмяВременногоФайла("");
	ПолноеИмяФайла = КаталогВременныхФайлов + "\" + ИмяФайла;
	Попытка
		СоздатьКаталог(КаталогВременныхФайлов);
		ДвоичныеДанныеФайла.Записать(ПолноеИмяФайла);
	Исключение
		Возврат;
	КонецПопытки;

	УдалитьИзВременногоХранилища(АдресДвоичныхДанныхВоВременномХранилище);
	ЗапросСоответствие.Получить("input_message_content").Удалить("documentTempStorage");
	ЗапросСоответствие.Получить("input_message_content").Получить("document").Вставить("path", ПолноеИмяФайла);
	ДанныеЗапроса.Вставить("КаталогВременныхФайлов", КаталогВременныхФайлов);
	
КонецПроцедуры

Процедура ПостОбработкаОтправляемыхДанных(ДанныеЗапроса, УникальныйИдентификаторФормы) Экспорт
	
	Если ДанныеЗапроса.Команда = "sendMessage" Тогда
		ПостОбработкаОтправляемыхДанных_sendMessage(ДанныеЗапроса, УникальныйИдентификаторФормы);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПостОбработкаОтправляемыхДанных_sendMessage(ДанныеЗапроса, УникальныйИдентификаторФормы);

	Если ДанныеЗапроса.ТелоЗапросаСоответствие.Получить("input_message_content").Получить("@type") <> "inputMessageDocument" 
		ИЛИ Не ДанныеЗапроса.Свойство("КаталогВременныхФайлов") Тогда
		Возврат;
	КонецЕсли;
	
	КаталогВременныхФайлов = ДанныеЗапроса.КаталогВременныхФайлов;
	
	Если Не ЗначениеЗаполнено(КаталогВременныхФайлов) Тогда
		Возврат;
	КонецЕсли;
	

	Попытка
		УдалитьФайлы(КаталогВременныхФайлов);
	Исключение
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти
